"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([[8123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var g=r.createContext({}),s=function(e){var t=r.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(g.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,g=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,c=u["".concat(g,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(c,i(i({ref:t},p),{},{components:n})):r.createElement(c,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var g in t)hasOwnProperty.call(t,g)&&(l[g]=t[g]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6682:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={id:"logger",title:"Logger",sidebar_position:12},i=void 0,l={unversionedId:"api/middleware/logger",id:"api/middleware/logger",title:"Logger",description:"Logger middleware for Fiber that logs HTTP request/response details.",source:"@site/docs/api/middleware/logger.md",sourceDirName:"api/middleware",slug:"/api/middleware/logger",permalink:"/docs/api/middleware/logger",draft:!1,editUrl:"https://github.com/gofiber/docs/edit/docusaurus-migration/docs/api/middleware/logger.md",tags:[],version:"current",lastUpdatedBy:"Muhammed Efe \xc7etin",lastUpdatedAt:1668443837,formattedLastUpdatedAt:"Nov 14, 2022",sidebarPosition:12,frontMatter:{id:"logger",title:"Logger",sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Limiter",permalink:"/docs/api/middleware/limiter"},next:{title:"Monitor",permalink:"/docs/api/middleware/monitor"}},g={},s=[{value:"Signatures",id:"signatures",level:2},{value:"Examples",id:"examples",level:2},{value:"<strong>Initialization / Default Config</strong>",id:"initialization--default-config",level:3},{value:"<strong>Logging remote IP and Port</strong>",id:"logging-remote-ip-and-port",level:3},{value:"Logging Request ID",id:"logging-request-id",level:3},{value:"<strong>Changing TimeZone &amp; TimeFormat</strong>",id:"changing-timezone--timeformat",level:3},{value:"<strong>Custom File Writer</strong>",id:"custom-file-writer",level:3},{value:"Config",id:"config",level:2},{value:"Default Config",id:"default-config",level:2},{value:"Constants",id:"constants",level:2}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Logger middleware for ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gofiber/fiber"},"Fiber")," that logs HTTP request/response details."),(0,a.kt)("h2",{id:"signatures"},"Signatures"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func New(config ...Config) fiber.Handler\n")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"First ensure the appropriate packages are imported"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/gofiber/fiber/v2"\n    "github.com/gofiber/fiber/v2/middleware/logger"\n)\n')),(0,a.kt)("h3",{id:"initialization--default-config"},(0,a.kt)("strong",{parentName:"h3"},"Initialization / Default Config")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Default middleware config\napp.Use(logger.New())\n")),(0,a.kt)("h3",{id:"logging-remote-ip-and-port"},(0,a.kt)("strong",{parentName:"h3"},"Logging remote IP and Port")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'app.Use(logger.New(logger.Config{\n        Format:     "[${ip}]:${port} ${status} - ${method} ${path}\\n",\n}))\n')),(0,a.kt)("h3",{id:"logging-request-id"},"Logging Request ID"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'app.Use(requestid.New())\n\napp.Use(logger.New(logger.Config{\n    // For more options, see the Config section\n  Format: "${pid} ${locals:requestid} ${status} - ${method} ${path}\\n",\n}))\n')),(0,a.kt)("h3",{id:"changing-timezone--timeformat"},(0,a.kt)("strong",{parentName:"h3"},"Changing TimeZone & TimeFormat")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'app.Use(logger.New(logger.Config{\n    Format:     "${pid} ${status} - ${method} ${path}\\n",\n    TimeFormat: "02-Jan-2006",\n    TimeZone:   "America/New_York",\n}))\n')),(0,a.kt)("h3",{id:"custom-file-writer"},(0,a.kt)("strong",{parentName:"h3"},"Custom File Writer")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'file, err := os.OpenFile("./123.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)\nif err != nil {\n    log.Fatalf("error opening file: %v", err)\n}\ndefer file.Close()\n\napp.Use(logger.New(logger.Config{\n    Output: file,\n}))\n')),(0,a.kt)("h2",{id:"config"},"Config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Config defines the config for middleware.\ntype Config struct {\n    // Next defines a function to skip this middleware when returned true.\n    //\n    // Optional. Default: nil\n    Next func(c *fiber.Ctx) bool\n\n    // Format defines the logging tags\n    //\n    // Optional. Default: [${time}] ${status} - ${latency} ${method} ${path}\\n\n    Format string\n\n    // TimeFormat https://programming.guide/go/format-parse-string-time-date-example.html\n    //\n    // Optional. Default: 15:04:05\n    TimeFormat string\n\n    // TimeZone can be specified, such as "UTC" and "America/New_York" and "Asia/Chongqing", etc\n    //\n    // Optional. Default: "Local"\n    TimeZone string\n\n    // TimeInterval is the delay before the timestamp is updated\n    //\n    // Optional. Default: 500 * time.Millisecond\n    TimeInterval time.Duration\n\n    // Output is a writter where logs are written\n    //\n    // Default: os.Stderr\n    Output io.Writer\n}\n')),(0,a.kt)("h2",{id:"default-config"},"Default Config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var ConfigDefault = Config{\n    Next:         nil,\n    Format:       "[${time}] ${status} - ${latency} ${method} ${path}\\n",\n    TimeFormat:   "15:04:05",\n    TimeZone:     "Local",\n    TimeInterval: 500 * time.Millisecond,\n    Output:       os.Stderr,\n}\n')),(0,a.kt)("h2",{id:"constants"},"Constants"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Logger variables\nconst (\n    TagPid               = "pid"\n    TagTime              = "time"\n    TagReferer           = "referer"\n    TagProtocol          = "protocol"\n    TagPort              = "port"\n    TagIP                = "ip"\n    TagIPs               = "ips"\n    TagHost              = "host"\n    TagMethod            = "method"\n    TagPath              = "path"\n    TagURL               = "url"\n    TagUA                = "ua"\n    TagLatency           = "latency"\n    TagStatus            = "status"      // response status\n    TagResBody           = "resBody"     // response body\n        TagReqHeaders        = "reqHeaders"\n    TagQueryStringParams = "queryParams" // request query parameters\n    TagBody              = "body"        // request body\n    TagBytesSent         = "bytesSent"\n    TagBytesReceived     = "bytesReceived"\n    TagRoute             = "route"\n    TagError             = "error"\n    TagHeader            = "header:"     // DEPRECATED: Use TagReqHeader instead\n    TagReqHeader         = "reqHeader:"  // request header\n    TagRespHeader        = "respHeader:" // response header\n    TagQuery             = "query:"      // request query\n    TagForm              = "form:"       // request form\n    TagCookie            = "cookie:"     // request cookie\n    TagLocals            = "locals:"\n\n    // colors\n    TagBlack   = "black"\n    TagRed     = "red"\n    TagGreen   = "green"\n    TagYellow  = "yellow"\n    TagBlue    = "blue"\n    TagMagenta = "magenta"\n    TagCyan    = "cyan"\n    TagWhite   = "white"\n    TagReset   = "reset"\n)\n')))}d.isMDXComponent=!0}}]);